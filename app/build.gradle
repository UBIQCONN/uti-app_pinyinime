apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.android.inputmethod.pinyin"
        minSdkVersion 26
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        aaptOptions {
            noCompress "dat"
        }
        archivesBaseName = "ime_pinyin"
    }
    signingConfigs {
        sign_aosp {
            keyAlias 'aosp'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/aosp_platform.jks')
            storePassword 'ubiqconn'
        }
        sign_nxp_evk {
            keyAlias 'nxp_evk'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/nxp_evk.jks')
            storePassword 'ubiqconn'
        }
        sign_ubiqconn {
            keyAlias 'ubiqconn'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/ubiqconn_platform.jks')
            storePassword 'ubiqconn'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.sign_nxp_evk
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.sign_nxp_evk
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    namespace "com.android.inputmethod.pinyin"

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${archivesBaseName}-${variant.name}-${defaultConfig.versionName}.apk"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// Define a custom task to copy the APK
task copyApk(type: Copy) {
    def apkDir = file("${project.buildDir}/outputs/apk/release")
    from apkDir
    include 'ime_pinyin-release-1.0.apk' // Replace with the actual APK filename if needed
    into project.rootDir
}

task delApk(type: Delete) {
    def apkFile = file("${project.rootDir}/ime_pinyin-release-1.0.apk") // Replace with the actual APK filename if needed
    delete apkFile
}
// Make the copyApk task depend on the assembleRelease task
tasks.getByName("assemble").dependsOn(copyApk)
tasks.getByName("clean").dependsOn(delApk)
